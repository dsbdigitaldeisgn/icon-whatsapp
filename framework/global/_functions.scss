@charset "UTF-8";


// Sumario 
//      Fonts
//          fontBase
//          font-size
//      ModalBox
//          boxSizing
//          borderBox
//          backgroundSizer
//          opacidade
//          aparence
//          heightSizer
//      Posições
//          positionElement
//          pseudo
//          posElement
//      Comportamento
//          columns
//          displayFlex

// Fonts
@mixin fontBase ( $textBlock, $color, $size, $lineHeight, $FontFamily, $weight, $testUppCase, $testAlign  ){

    // bloco
    @if($textBlock == inline) {
        display: inline-block;
    }@else if $textBlock == flex{
        display: flex;
    }@else {
        display: block;
    }

    color: $color;
    font-size: $size;
    line-height: $lineHeight;
    font-family: $FontFamily;
    // peso
    font-weight: $weight;
    // Upper case
    @if($testUppCase == 1 ) {
        text-transform: uppercase;
    }
    // text-align
    @if($testAlign == -1) {
        text-align: left; 
    }@else if $testAlign == 0 {
        text-align: center; 
    }@else {
        text-align: right;
    }  
   
}

// Fonts Map
@mixin font-size($fs-map) {
  @each $fs-breakpoint, $fs-font-size in $fs-map {
    @if $fs-breakpoint == null {
      font-size: $fs-font-size;
    }
    @else {
      @media screen and (min-width: $fs-breakpoint) {
        font-size: $fs-font-size;
      }
    }
  }
}

// Opacidade 
@mixin opacidade ( $opacidade ) {
    // Valores de 0 a 100
    $all                : $opacidade / 100;
    $filter             : $opacidade;  
    
    opacity: $all;
    -moz-opacity: $all;
    -ms-opacity: $all;
    filter: alpha(opacity=$filter);
}


// Opacidade por tipo de elemento
//      - bg, 
//      - color 
//      - border
@mixin colorAlpha ($tipo, $color, $alpha){
    @if($tipo == bg) {
        background-color: rgba($color, $alpha);
    }
    @if($tipo == color) {
        color: rgba($color, $alpha);
    }
    @if($tipo == border) {
        border-color: rgba($color, $alpha);
    }
}

// background-size
@mixin backgroundSizer( $tipo ) {
    -webkit-background-size:    $tipo;
    -moz-background-size:       $tipo;
    -o-background-size:         $tipo;
    background-size:            $tipo;
}

// Definição das bordas
@mixin borderBox( $width, $style, $color ) {
    border-width: $width;
    border-style: $style;
    border-color: $color;
}
@mixin borderBoxAlpha( $width, $style, $color, $alpha ) {
    border-width: $width;
    border-style: $style;
    @include colorAlpha ( border, $color, $alpha );
}
// boxSizing
@mixin boxSizing( $tipoDeBorder ) {
    -webkit-box-sizing: $tipoDeBorder;
    -moz-box-sizing:    $tipoDeBorder;
    box-sizing:         $tipoDeBorder;
}
// aparence de elementos
@mixin aparence( $comoDeveAparecer ) {
    -webkit-appearance: $comoDeveAparecer !important;
    -moz-appearance:    $comoDeveAparecer !important;
    appearance:         $comoDeveAparecer !important;
}

// Dimenções
@mixin heightSizer($base-heights) {
  @each $breakpoint, $unidHeights in $base-heights {
    @if $breakpoint == null {
      height: $unidHeights;
    }
    @else {
      @media screen and (min-width: $breakpoint) {
        height: $unidHeights;
      }
    }
  }
}

@mixin minHeightSizer($base-minheights) {
    @each $breakpoint, $unidMinHeights in $base-minheights {
      @if $breakpoint == null {
        min-height: $unidMinHeights;
      }
      @else {
        @media screen and (min-width: $breakpoint) {
          min-height: $unidMinHeights;
        }
      }
    }
  }

// Dimenções
@mixin heightRatio16_9($base-heights) {

    @each $breakpoint,
    $unidHeights in $base-heights {
        @if $breakpoint==null {
            height: $unidHeights / (16 / 9);
        }

        @else {
            @media screen and (min-width: $breakpoint) {
                height: $unidHeights / (16 / 9);
            }
        }
    }
}
@mixin widthtRatio16_9($base-width) {

    @each $breakpoint,
    $unidwidth in $base-width {
        @if $breakpoint==null {
            width: $unidwidth * (9 / 16);
        }

        @else {
            @media screen and (min-width: $breakpoint) {
                width: $unidwidth * (9 / 16);
            }
        }
    }
}

// ================================ Posições ====================

// positionElement
@mixin positionElement( $typeElement, $position, $eixoX, $eixoY, $x, $y, $zi) {
    
    // 0 = relative 
    // 1 = absolute 
    // 2 - fixed

    // Para todos os elementos
    @if($typeElement == true) {
        @include posElement( 
            $testElement        : $position, 
            $z_index            : $zi
        );
    }

    // para todos os pseudos elementos (::before, ::after e cia)
    @if($typeElement == false) {
        @include pseudo( 
            $testPseudo         : $position, 
            $z_index            : $zi
        );
    }
    
    // 0 = $testQuadranteX ou $testQuadranteY é valor null no $eixoX e $eixoY
    @if($eixoX == $eixoY and $eixoY == null ){
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
    }
    // top e left
    @if($eixoX == left and $eixoY == top ){
        top: $y;
        left: $x;
    } 
    // top e right
    @if($eixoX == right and $eixoY == top ){
        top: $y;
        right: $x;
    }
    // bottom e left
    @if($eixoX ==left  and $eixoY == bottom) {
        bottom: $y;
        left: $x;
    } 
    // bottom e right
    @if($eixoX ==right and $eixoY== bottom) {
        bottom: $y;
        right: $x;
    }

}

// pseudo elementos
@mixin pseudo( $testPseudo, $z_index){
    
    // 0 = relative 
    // 1 = absolute 

    @if($testPseudo == 0 ){
        content: '';
        display: block;
        position: relative;
        z-index: $z_index;    
    }
    @if($testPseudo != 0) {
        content: '';
        display: block;
        position: absolute;
        z-index: $z_index; 
    }
}

// posição dos elementos 
@mixin posElement( $testElement, $z_index){
    
    // 0 = relative 
    // 1 = absolute 
    // 2 - fixed

    @if($testElement == 0 ){
        display: block;
        position: relative;
        z-index: $z_index;    
    }
    @if($testElement == 1 ) {
        display: block;
        position: absolute;
        z-index: $z_index; 
    }
    @if($testElement > 1 ){
        display: block;
        position: fixed;
        z-index: $z_index;    
    }
}



// ================================ Comportamento dos elementos ====================

//colums 
@mixin columns( $larguraColuna, $quantasColunas, $gap){
    -webkit-columns: $quantasColunas $larguraColuna;
    -moz-columns: $quantasColunas $larguraColuna;
    columns: $quantasColunas $larguraColuna;
    -webkit-column-gap: $gap;
    -moz-column-gap: $gap;
    column-gap: $gap;
}

// flex box
@mixin displayFlex( $is_Flex, $tipoDirection, $justify_content, $align_items ){
    @if( $is_Flex = true) {
        display: -webkit-flex;
        display: -moz-flex;
        display: -ms-flex;
        display: -o-flex;
        display: flex;
        flex-wrap: wrap;
        @if $tipoDirection == column {
            flex-direction: column;    
        }@else {
            flex-direction: row;    
        }
        @if($justify_content == -1) {
            justify-content: flex-start;
        }@else if $justify_content == 0 {
            justify-content: center;
        }@else if $justify_content == 1 {
            justify-content: flex-end;
        }@else if $justify_content == 2 {
            justify-content: space-around;
        }@else {
            justify-content: space-between;
        }
        @if $align_items != 0 {
            align-items: $align_items;    
        } 
    } @else {
        display: block;
    }    
}

@mixin visivel ($is_visivel){
    @if($is_visivel == true) {
        visibility: visible;
        @include opacidade ( 100 );
    }
    @if($is_visivel == false) {
        visibility: hidden;
        @include opacidade ( 0 );
    }
}

@mixin input-placeholder {
    &.placeholder { @content; }
    &:-moz-placeholder { @content; }
    &::-moz-placeholder { @content; }
    &:-ms-input-placeholder { @content; }
    &::-webkit-input-placeholder { @content; }
}

@mixin colorsCTA ($color) {
    color: $color;
    border-color: $color;
}

@mixin transitions( $duracao ) {
    -webkit-transition: all $duracao ease;
    -moz-transition:    all $duracao ease;
    -ms-transition:     all $duracao ease;
    -o-transition:      all $duracao ease;
    transition:         all $duracao ease;
}